install.packages("tidyverse")
install.packages("ggrepel")
install.packages("ggimage")
install.packages("nflfastR")


library(tidyverse)
library(ggrepel)
library(ggimage)
library(nflfastR)

#load seasons one way
seasons <- 2019:2020
pbp <- map_df(seasons, function(x) {
readRDS(
url(
paste0("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_",x,".rds")
)
)
})

#or load this way
pbp_21 <- load_pbp(2021)

pbp <- pbp %>%
mutate(
qbh_inc =
case_when(qb_hit == 1 & incomplete_pass == 1 ~ "1")) %>%
mutate(qb_int =
case_when(interception == 1 & qb_hit == 1 ~ "1"))


#all qualifying plays for 2020 regular season - can change season and week
off.line.allplays <- pbp %>%
     filter(season == 2020 & week <= 17) %>%
     filter((sack == 1 | tackled_for_loss == 1 |(yards_gained <= 2 & play_type == "run")|  qb_scramble == 1 | qb_hit == 1 | qbh_inc == 1 | qb_int == 1) & wpa != "NA" )    # the & statements eliminate kicks?

#list of all teams - to make cumulative graphs
teams <- unique(off.line.allplays$posteam)

#define empty data frame - to make cumulative graphs
df <- data.frame()

# to make cumulative graphs
#for loop to create data frames for each team, fills data frame (df) with all team data by rbind
#create sum_wpa for each team's o-line cumulative WPA for the season
#should see separate team listings
for (i in teams){
     df <- rbind(df, assign(paste0(tolower(i)),
                            off.line.allplays %>%
                                filter(posteam==i)%>%
                                mutate(
                                    sum_wpa = cumsum(wpa)
                                ) %>% 
                                select(posteam, sum_wpa))
     )
 }

#mutate df, add variable "play_num" to count the number of total offensive plays run by each team
df <- df %>% 
  group_by(posteam) %>% 
  mutate(
    play_num = seq_along(posteam)
  )   
  
 
  #create logos_df from df. this data frame will contain coordinates that will tell ggplot where to plot team logos
 #summarise by team, x coordinate = last offensive play in the sequence, y coordinate = cumulative WPA on final play
 logos_df <- df %>%
     group_by(posteam) %>%
     summarise(
         tot_wpa = last(sum_wpa),
         last_play = max(play_num)
     ) %>%
     left_join(teams_colors_logos, by=c("posteam"="team_abbr"))
View(logos_df)

#- to make cumulative graphs
#define new plot: off_deficiency
off_deficiency <- ggplot()+
  geom_hline(yintercept=0, size=1, color="black")+
  geom_line(aes(x=df$play_num, y=df$sum_wpa,color=df$posteam,alpha=ifelse(df$posteam=="PIT"|df$posteam=="CLE", 1, .8)),size=1.5, show.legend = FALSE)+
  geom_image(aes(x=logos_df$last_play, y=logos_df$tot_wpa, image = logos_df$team_logo_espn), size = 0.045, by = "width", asp = 16/9)+
  scale_color_manual(values=c("ARI"="#97233f", "ATL"="#a71930", "BAL"="#241773", "BUF"="#00338d", "CAR"="#0085ca","CHI"="#0b162a","CIN"="#000000","CLE"="#fb4f14",
                              "DAL"="#002244", "DEN"="#002244","DET"="#005a8b", "GB"="#203731","HOU"="#03202f","IND"="#002c5f", "JAX"="#000000","KC"="#e31837",
                              "LAC"="#002244","LA"="#002244","MIA"="#008e97","MIN"="#4f2683","NE"="#002244","NO"="#9f8958","NYG"="#0b2265","NYJ"="#125740","OAK"="#a5acaf",
                              "PHI"="#004953","PIT"="#000000","SD"="#002244","SF"="#aa0000","SEA"="#69be28","STL"="#002244","TB"="#d50a0a","TEN"="#4095d1","WAS"="#773141")) +
  scale_x_continuous(breaks=seq(0,500,50), expand=c(.02,0))+
  scale_y_continuous(breaks=seq(-200,800,50), expand=c(.01,0))+
  theme_bw() +
  theme(panel.background=element_blank()) +
  theme(plot.background=element_rect(fill="#FFFFFF")) +
  theme(panel.border = element_blank()) +
  theme(panel.grid.major= element_blank()) +
  theme(axis.text.x=element_text(angle = 50, vjust = 0.5,    size=11,colour="#535353",face="bold")) +
  theme(axis.text.y=element_text(size=11,colour="#535353",face="bold")) +
  theme(axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5)) +
  theme(axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5)) +
  theme(plot.title=element_text(face="bold", colour="#006ebb",size=18, family = "Dense")) +
  theme(plot.subtitle=element_text(colour = "#006ebb", size = 12, family = "Dense")) +
  theme(axis.ticks = element_blank()) +
  theme(aspect.ratio = 9 / 16) +
  xlab("Total Number of Plays") +
  ylab("Cumulative WPA")

#- to make cumulative graphs
#plot off_deficiency
plot(off_deficiency)


off.line.PIT <- pbp %>%
group_by(week) %>%
filter(season == 2020 & week <= 17) %>%
filter(posteam == "PIT") %>%
filter(sack == 1 | tackled_for_loss == 1 |(yards_gained <= 2 & play_type == "run")|  qb_scramble == 1 | qb_hit == 1 | qbh_inc == 1 | qb_int == 1 ) %>%
summarize(pit.total = n(),
pit.sum.wpa = sum(wpa, na.rm = T),
pit.avg.wpa = (pit.sum.wpa / pit.total) * 100)   # the & statements eliminate kicks?

#creates data for all teams over regular season - maybe want to modify qb scrambles and hits to limit yards
off.line <- pbp %>%
    group_by(week, posteam) %>%
     filter(season == 2020 & week <= 17) %>%
     
     filter(sack == 1 | tackled_for_loss == 1 |(yards_gained <= 2 & play_type == "run")|  qb_scramble == 1 | qb_hit == 1 | qbh_inc == 1 | qb_int == 1 ) %>%
     summarize(total = n(),
               sum.wpa = sum(wpa, na.rm = T),
               avg.wpa = (sum.wpa / total) * 100)   # the & statements eliminate kicks?

#ranks teams by weekly performace - subtracting from 33 means higher numbers are better bc rank command ranks lowest = 1 but lowest is worst here
off.line <- off.line %>% 
               group_by(week) %>%
               mutate(weekly.rank = 33 - rank(avg.wpa)) %>%
               mutate(nfl.avg.wpa = mean(avg.wpa)) %>%
               mutate(nfl.sd.wpa = sd(avg.wpa)) %>%
               mutate(z.score = (avg.wpa - nfl.avg.wpa) / nfl.sd.wpa) 
 
#filters off.line to an individual team
DAL <- off.line %>% filter(posteam == "DAL")

#saves DAL as a csv file, can export to computer and use as spreadsheet
write.csv(DAL, "DAl.csv")



#calculates the average wpa for all teams over entire season to show on graph
meannfl <- mean(off.line$avg.wpa)
meanDALwpa <- mean(DAL$avg.wpa)  #calculates ave wpa for just DAL

#logo and color for team
Dal_logo <- dplyr::filter(teams_colors_logos, team_abbr == "DAL")

#line plot of all teams with 1 team highlighted - last line adds team logo at end - have to have logo file created  
ggplot(data=off.line, aes(x=`week`, y=`avg.wpa`, group=`posteam`)) +
     geom_line(color="grey", alpha = 0.5) +
     geom_point(data = DAL) +
     geom_line(data = DAL, colour = "#002244") +
     ggtitle("DAL", subtitle = "Weekly Offensive Line WPA (Dal avg dotted)") +
     geom_hline(yintercept = meannfl) +  
     geom_hline(yintercept = meanDALwpa, linetype = "dashed") +
     geom_image(aes(x = last(DAL$week), y = last(DAL$avg.wpa), image = Dal_logo$team_logo_espn ))

#filter to 3 teams
threeteams <- off.line %>% filter(posteam == "KC" | posteam == "TEN" | posteam == "CAR")

#line plot of avg.wpa by week  for 3 teams
ggplot(data=threeteams, aes(x=`week`, y=`avg.wpa`, group=`posteam`)) +
  geom_line(aes(color=`posteam`)) +
  geom_point() +
  geom_hline(yintercept = meannfl)

#not sure we're using this anymore - this would be used to calculate the rest of the NFL to be able to make comparisons
off.line.avg.NPIT <- pbp %>%
group_by(week) %>%
filter(season == 2020 & week <= 17 & posteam != "PIT") %>%
filter(sack == 1 | tackled_for_loss == 1 |(yards_gained <= 2 & play_type == "run") | qb_scramble == 1 | qb_hit == 1 | qbh_inc == 1 | qb_int == 1 ) %>%
summarize(nfl.total = n(),
nfl.avg.wpa = (sum(wpa, na.rm = T) / nfl.total) * 100)

#not sure we're using this anymore - this measures a team against the rest of the NFL by week
combined <- left_join(off.line.PIT, off.line.avg.NPIT, by = c("week" = "week"))
combined <- combined %>%
group_by(week) %>%
mutate(pit.wpa = (pit.avg.wpa - nfl.avg.wpa) / 10)
